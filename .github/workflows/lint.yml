name: Lint and Code Quality

on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version to use"
        required: false
        default: "20"
        type: string
      python-version:
        description: "Python version to use"
        required: false
        default: "3.13"
        type: string
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version || '3.13' }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        working-directory: ./backend
        run: uv sync --extra dev

      - name: Run Ruff linter
        working-directory: ./backend
        run: uvx ruff check .

      - name: Run Ruff formatter check
        working-directory: ./backend
        run: uvx ruff format --check .

  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version || '20' }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ./frontend
        run: pnpm run lint

      - name: Run TypeScript type checking
        working-directory: ./frontend
        run: pnpm run build

      - name: Check formatting with Prettier
        working-directory: ./frontend
        run: pnpm exec prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
